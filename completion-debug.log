
========= starting completion logic ==========
CURRENT: 2, words[*]: pnpm 
Truncated words[*]: pnpm ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- '' ''
completion output: add	Installs a package and any packages that it depends on. By default, any new package is installed as a prod dependency
import	Generates a pnpm-lock.yaml from an npm package-lock.json (or npm-shrinkwrap.json) file
i	Install all dependencies for a project
install	Install all dependencies for a project
it	Runs a pnpm install followed immediately by a pnpm test
install-test	Runs a pnpm install followed immediately by a pnpm test
ln	Connect the local project to another one
link	Connect the local project to another one
prune	Removes extraneous packages
rb	Rebuild a package
rebuild	Rebuild a package
rm	Removes packages from node_modules and from the project's package.json
remove	Removes packages from node_modules and from the project's package.json
unlink	Unlinks a package. Like yarn unlink but pnpm re-installs the dependency after removing the external link
up	Updates packages to their latest version based on the specified range
update	Updates packages to their latest version based on the specified range
audit	Checks for known security issues with the installed packages
licenses	Check licenses in consumed packages
ls	Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
list	Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
outdated	Check for outdated packages
exec	Executes a shell command in scope of a project
run	Runs a defined package script
start	Runs an arbitrary command specified in the package's "start" property of its "scripts" object
t	Runs a package's "test" script, if one was provided
test	Runs a package's "test" script, if one was provided
cat-file	Prints the contents of a file based on the hash value stored in the index file
cat-index	Prints the index file of a specific package from the store
find-hash	Experimental! Lists the packages that include the file with the specified hash.
pack	Create a tarball from a package
publish	Publishes a package to the registry
root	Prints the effective modules directory
store	Adds new packages to the pnpm store directly. Does not modify any projects or files outside the store
:4
last line: :4
directive: 4
completions: add	Installs a package and any packages that it depends on. By default, any new package is installed as a prod dependency
import	Generates a pnpm-lock.yaml from an npm package-lock.json (or npm-shrinkwrap.json) file
i	Install all dependencies for a project
install	Install all dependencies for a project
it	Runs a pnpm install followed immediately by a pnpm test
install-test	Runs a pnpm install followed immediately by a pnpm test
ln	Connect the local project to another one
link	Connect the local project to another one
prune	Removes extraneous packages
rb	Rebuild a package
rebuild	Rebuild a package
rm	Removes packages from node_modules and from the project's package.json
remove	Removes packages from node_modules and from the project's package.json
unlink	Unlinks a package. Like yarn unlink but pnpm re-installs the dependency after removing the external link
up	Updates packages to their latest version based on the specified range
update	Updates packages to their latest version based on the specified range
audit	Checks for known security issues with the installed packages
licenses	Check licenses in consumed packages
ls	Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
list	Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
outdated	Check for outdated packages
exec	Executes a shell command in scope of a project
run	Runs a defined package script
start	Runs an arbitrary command specified in the package's "start" property of its "scripts" object
t	Runs a package's "test" script, if one was provided
test	Runs a package's "test" script, if one was provided
cat-file	Prints the contents of a file based on the hash value stored in the index file
cat-index	Prints the index file of a specific package from the store
find-hash	Experimental! Lists the packages that include the file with the specified hash.
pack	Create a tarball from a package
publish	Publishes a package to the registry
root	Prints the effective modules directory
store	Adds new packages to the pnpm store directly. Does not modify any projects or files outside the store
flagPrefix: 
Adding completion: add:Installs a package and any packages that it depends on. By default, any new package is installed as a prod dependency
Adding completion: import:Generates a pnpm-lock.yaml from an npm package-lock.json (or npm-shrinkwrap.json) file
Adding completion: i:Install all dependencies for a project
Adding completion: install:Install all dependencies for a project
Adding completion: it:Runs a pnpm install followed immediately by a pnpm test
Adding completion: install-test:Runs a pnpm install followed immediately by a pnpm test
Adding completion: ln:Connect the local project to another one
Adding completion: link:Connect the local project to another one
Adding completion: prune:Removes extraneous packages
Adding completion: rb:Rebuild a package
Adding completion: rebuild:Rebuild a package
Adding completion: rm:Removes packages from node_modules and from the project's package.json
Adding completion: remove:Removes packages from node_modules and from the project's package.json
Adding completion: unlink:Unlinks a package. Like yarn unlink but pnpm re-installs the dependency after removing the external link
Adding completion: up:Updates packages to their latest version based on the specified range
Adding completion: update:Updates packages to their latest version based on the specified range
Adding completion: audit:Checks for known security issues with the installed packages
Adding completion: licenses:Check licenses in consumed packages
Adding completion: ls:Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
Adding completion: list:Print all the versions of packages that are installed, as well as their dependencies, in a tree-structure
Adding completion: outdated:Check for outdated packages
Adding completion: exec:Executes a shell command in scope of a project
Adding completion: run:Runs a defined package script
Adding completion: start:Runs an arbitrary command specified in the package's "start" property of its "scripts" object
Adding completion: t:Runs a package's "test" script, if one was provided
Adding completion: test:Runs a package's "test" script, if one was provided
Adding completion: cat-file:Prints the contents of a file based on the hash value stored in the index file
Adding completion: cat-index:Prints the index file of a specific package from the store
Adding completion: find-hash:Experimental! Lists the packages that include the file with the specified hash.
Adding completion: pack:Create a tarball from a package
Adding completion: publish:Publishes a package to the registry
Adding completion: root:Prints the effective modules directory
Adding completion: store:Adds new packages to the pnpm store directly. Does not modify any projects or files outside the store
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 2, words[*]: pnpm ins
Truncated words[*]: pnpm ins,
lastParam: ins, lastChar: s
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- ins
completion output: install	Install all dependencies for a project
install-test	Runs a pnpm install followed immediately by a pnpm test
:4
last line: :4
directive: 4
completions: install	Install all dependencies for a project
install-test	Runs a pnpm install followed immediately by a pnpm test
flagPrefix: 
Adding completion: install:Install all dependencies for a project
Adding completion: install-test:Runs a pnpm install followed immediately by a pnpm test
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --
Truncated words[*]: pnpm install --,
lastParam: --, lastChar: -
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --
completion output: --aggregate-output	Aggregate output from child processes that are run in parallel, and only print output when child process is finished. It makes reading large logs after running `pnpm recursive` with `--parallel` or with `--workspace-concurrency` much easier (especially on CI). Only `--reporter=append-only` is supported.
--child-concurrency	Controls the number of child processes run parallelly to build node modules
--dev	Only `devDependencies` are installed
--dir	Change to directory <dir> (default: /Users/amir/Desktop/projects/tab)
--fix-lockfile	Fix broken lockfile entries automatically
--force	Force reinstall dependencies: refetch packages modified in store, recreate a lockfile and/or modules directory created by a non-compatible version of pnpm. Install all optionalDependencies even they don't satisfy the current environment(cpu, os, arch)
--global-dir	Specify a custom directory to store global packages
--help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
--ignore-pnpmfile	Disable pnpm hooks defined in .pnpmfile.cjs
--ignore-scripts	Don't run lifecycle scripts
--ignore-workspace	Ignore pnpm-workspace.yaml if exists in the parent directory, and treat the installation as normal non-workspace installation.
--lockfile-dir	The directory in which the pnpm-lock.yaml of the package will be created. Several projects may share a single lockfile.
--lockfile-only	Dependencies are not downloaded. Only `pnpm-lock.yaml` is updated
--loglevel	What level of logs to report. Any logs at or higher than the given level will be shown. Levels (lowest to highest): debug, info, warn, error. Or use "--silent" to turn off all logging.
--merge-git-branch-lockfiles	Merge lockfiles were generated on git branch
--modules-dir	The directory in which dependencies will be installed (instead of node_modules)
--network-concurrency	Maximum number of concurrent network requests
--no-hoist	Dependencies inside the modules directory will have access only to their listed dependencies
--no-lockfile	Don't read or generate a `pnpm-lock.yaml` file
--no-optional	`optionalDependencies` are not installed
--offline	Trigger an error if any required dependencies are not available in local store
--optimistic-repeat-install	Skip reinstall if the workspace state is up-to-date selected method depends from the file system the store
--prefer-frozen-lockfile	If the available `pnpm-lock.yaml` satisfies the `package.json` then perform a headless installation
--prefer-offline	Skip staleness checks for cached data, but request missing data from the server
--prod	Packages in `devDependencies` won't be installed
--public-hoist-pattern	Hoist all dependencies matching the pattern to the root of the modules directory
--recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--shamefully-hoist	All the subdeps will be hoisted into the root node_modules. Your code will have access to them
--side-effects-cache	Use or cache the results of (pre/post)install hooks
--side-effects-cache-readonly	Only use the side effects cache if present, do not create it for new packages
--store-dir	The directory in which all the packages are saved on the disk
--stream	Stream output from child processes immediately, prefixed with the originating package directory. This allows output from different packages to be interleaved.
--strict-peer-dependencies	Fail on missing or invalid peer dependencies
--use-running-store-server	Only allows installation with a store server. If no store server is running, installation will fail
--use-stderr	Divert all output to stderr
--use-store-server	Starts a store server in the background. The store server will keep running after installation is done. To stop the store server, run `pnpm server stop`
--virtual-store-dir	The directory with links to the store (default is node_modules/.pnpm). All direct and indirect dependencies of the project are linked into this directory
--workspace-root	Run the command on the root workspace project
--changed-files-ignore-pattern	Defines files to ignore when filtering for changed projects since the specified commit/branch. Usage example: pnpm pattern="**/README.md" build
--fail-if-no-match	If no projects are matched by the command, exit with exit code 1 (fail) \! in zsh), it means the packages matching the selector must be excluded. E.g., "pnpm packages except "foo" under the current working directory indirect dependents of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: ...^foo (...^^foo in Command Prompt) dependents of the matched packages. E.g.: ...foo, "...@bar/*" inside a given subdirectory. E.g.: ./components since the specified commit/branch. E.g.: "[master]", "[HEAD~2]". It may be used together with "...". So, for instance, "...[HEAD~1]" selects all packages changed in the last commit and their dependents under the specified directory. It may be used with "..." to select dependents/dependencies as well. It also may be combined with "[<since>]". For instance, all changed projects inside a directory: "{packages}[origin/master]"
--filter	Restricts the scope to package names matching the given pattern. E.g.: foo, "@bar/*" dependencies of the matched packages. E.g.: foo... indirect dependencies of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: foo^... (foo^^... in Command Prompt)
--filter-prod	Restricts the scope to package names matching the given pattern similar to --filter, but it ignores devDependencies when searching for dependencies and dependents.
--test-pattern	Defines files related to tests. Useful with the changed since filter. When selecting only changed packages and their dependent packages, the dependent packages will be ignored in case a package has changes only in tests. Usage example: pnpm
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --aggregate-output	Aggregate output from child processes that are run in parallel, and only print output when child process is finished. It makes reading large logs after running `pnpm recursive` with `--parallel` or with `--workspace-concurrency` much easier (especially on CI). Only `--reporter=append-only` is supported.
--child-concurrency	Controls the number of child processes run parallelly to build node modules
--dev	Only `devDependencies` are installed
--dir	Change to directory <dir> (default: /Users/amir/Desktop/projects/tab)
--fix-lockfile	Fix broken lockfile entries automatically
--force	Force reinstall dependencies: refetch packages modified in store, recreate a lockfile and/or modules directory created by a non-compatible version of pnpm. Install all optionalDependencies even they don't satisfy the current environment(cpu, os, arch)
--global-dir	Specify a custom directory to store global packages
--help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
--ignore-pnpmfile	Disable pnpm hooks defined in .pnpmfile.cjs
--ignore-scripts	Don't run lifecycle scripts
--ignore-workspace	Ignore pnpm-workspace.yaml if exists in the parent directory, and treat the installation as normal non-workspace installation.
--lockfile-dir	The directory in which the pnpm-lock.yaml of the package will be created. Several projects may share a single lockfile.
--lockfile-only	Dependencies are not downloaded. Only `pnpm-lock.yaml` is updated
--loglevel	What level of logs to report. Any logs at or higher than the given level will be shown. Levels (lowest to highest): debug, info, warn, error. Or use "--silent" to turn off all logging.
--merge-git-branch-lockfiles	Merge lockfiles were generated on git branch
--modules-dir	The directory in which dependencies will be installed (instead of node_modules)
--network-concurrency	Maximum number of concurrent network requests
--no-hoist	Dependencies inside the modules directory will have access only to their listed dependencies
--no-lockfile	Don't read or generate a `pnpm-lock.yaml` file
--no-optional	`optionalDependencies` are not installed
--offline	Trigger an error if any required dependencies are not available in local store
--optimistic-repeat-install	Skip reinstall if the workspace state is up-to-date selected method depends from the file system the store
--prefer-frozen-lockfile	If the available `pnpm-lock.yaml` satisfies the `package.json` then perform a headless installation
--prefer-offline	Skip staleness checks for cached data, but request missing data from the server
--prod	Packages in `devDependencies` won't be installed
--public-hoist-pattern	Hoist all dependencies matching the pattern to the root of the modules directory
--recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--shamefully-hoist	All the subdeps will be hoisted into the root node_modules. Your code will have access to them
--side-effects-cache	Use or cache the results of (pre/post)install hooks
--side-effects-cache-readonly	Only use the side effects cache if present, do not create it for new packages
--store-dir	The directory in which all the packages are saved on the disk
--stream	Stream output from child processes immediately, prefixed with the originating package directory. This allows output from different packages to be interleaved.
--strict-peer-dependencies	Fail on missing or invalid peer dependencies
--use-running-store-server	Only allows installation with a store server. If no store server is running, installation will fail
--use-stderr	Divert all output to stderr
--use-store-server	Starts a store server in the background. The store server will keep running after installation is done. To stop the store server, run `pnpm server stop`
--virtual-store-dir	The directory with links to the store (default is node_modules/.pnpm). All direct and indirect dependencies of the project are linked into this directory
--workspace-root	Run the command on the root workspace project
--changed-files-ignore-pattern	Defines files to ignore when filtering for changed projects since the specified commit/branch. Usage example: pnpm pattern="**/README.md" build
--fail-if-no-match	If no projects are matched by the command, exit with exit code 1 (fail) \! in zsh), it means the packages matching the selector must be excluded. E.g., "pnpm packages except "foo" under the current working directory indirect dependents of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: ...^foo (...^^foo in Command Prompt) dependents of the matched packages. E.g.: ...foo, "...@bar/*" inside a given subdirectory. E.g.: ./components since the specified commit/branch. E.g.: "[master]", "[HEAD~2]". It may be used together with "...". So, for instance, "...[HEAD~1]" selects all packages changed in the last commit and their dependents under the specified directory. It may be used with "..." to select dependents/dependencies as well. It also may be combined with "[<since>]". For instance, all changed projects inside a directory: "{packages}[origin/master]"
--filter	Restricts the scope to package names matching the given pattern. E.g.: foo, "@bar/*" dependencies of the matched packages. E.g.: foo... indirect dependencies of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: foo^... (foo^^... in Command Prompt)
--filter-prod	Restricts the scope to package names matching the given pattern similar to --filter, but it ignores devDependencies when searching for dependencies and dependents.
--test-pattern	Defines files related to tests. Useful with the changed since filter. When selecting only changed packages and their dependent packages, the dependent packages will be ignored in case a package has changes only in tests. Usage example: pnpm
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --aggregate-output:Aggregate output from child processes that are run in parallel, and only print output when child process is finished. It makes reading large logs after running `pnpm recursive` with `--parallel` or with `--workspace-concurrency` much easier (especially on CI). Only `--reporter=append-only` is supported.
Adding completion: --child-concurrency:Controls the number of child processes run parallelly to build node modules
Adding completion: --dev:Only `devDependencies` are installed
Adding completion: --dir:Change to directory <dir> (default: /Users/amir/Desktop/projects/tab)
Adding completion: --fix-lockfile:Fix broken lockfile entries automatically
Adding completion: --force:Force reinstall dependencies: refetch packages modified in store, recreate a lockfile and/or modules directory created by a non-compatible version of pnpm. Install all optionalDependencies even they don't satisfy the current environment(cpu, os, arch)
Adding completion: --global-dir:Specify a custom directory to store global packages
Adding completion: --help:Output usage information
Adding completion: --hoist-pattern:Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
Adding completion: --ignore-pnpmfile:Disable pnpm hooks defined in .pnpmfile.cjs
Adding completion: --ignore-scripts:Don't run lifecycle scripts
Adding completion: --ignore-workspace:Ignore pnpm-workspace.yaml if exists in the parent directory, and treat the installation as normal non-workspace installation.
Adding completion: --lockfile-dir:The directory in which the pnpm-lock.yaml of the package will be created. Several projects may share a single lockfile.
Adding completion: --lockfile-only:Dependencies are not downloaded. Only `pnpm-lock.yaml` is updated
Adding completion: --loglevel:What level of logs to report. Any logs at or higher than the given level will be shown. Levels (lowest to highest): debug, info, warn, error. Or use "--silent" to turn off all logging.
Adding completion: --merge-git-branch-lockfiles:Merge lockfiles were generated on git branch
Adding completion: --modules-dir:The directory in which dependencies will be installed (instead of node_modules)
Adding completion: --network-concurrency:Maximum number of concurrent network requests
Adding completion: --no-hoist:Dependencies inside the modules directory will have access only to their listed dependencies
Adding completion: --no-lockfile:Don't read or generate a `pnpm-lock.yaml` file
Adding completion: --no-optional:`optionalDependencies` are not installed
Adding completion: --offline:Trigger an error if any required dependencies are not available in local store
Adding completion: --optimistic-repeat-install:Skip reinstall if the workspace state is up-to-date selected method depends from the file system the store
Adding completion: --prefer-frozen-lockfile:If the available `pnpm-lock.yaml` satisfies the `package.json` then perform a headless installation
Adding completion: --prefer-offline:Skip staleness checks for cached data, but request missing data from the server
Adding completion: --prod:Packages in `devDependencies` won't be installed
Adding completion: --public-hoist-pattern:Hoist all dependencies matching the pattern to the root of the modules directory
Adding completion: --recursive:Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --resolution-only:Re-runs resolution: useful for printing out peer dependency issues
Adding completion: --shamefully-hoist:All the subdeps will be hoisted into the root node_modules. Your code will have access to them
Adding completion: --side-effects-cache:Use or cache the results of (pre/post)install hooks
Adding completion: --side-effects-cache-readonly:Only use the side effects cache if present, do not create it for new packages
Adding completion: --store-dir:The directory in which all the packages are saved on the disk
Adding completion: --stream:Stream output from child processes immediately, prefixed with the originating package directory. This allows output from different packages to be interleaved.
Adding completion: --strict-peer-dependencies:Fail on missing or invalid peer dependencies
Adding completion: --use-running-store-server:Only allows installation with a store server. If no store server is running, installation will fail
Adding completion: --use-stderr:Divert all output to stderr
Adding completion: --use-store-server:Starts a store server in the background. The store server will keep running after installation is done. To stop the store server, run `pnpm server stop`
Adding completion: --virtual-store-dir:The directory with links to the store (default is node_modules/.pnpm). All direct and indirect dependencies of the project are linked into this directory
Adding completion: --workspace-root:Run the command on the root workspace project
Adding completion: --changed-files-ignore-pattern:Defines files to ignore when filtering for changed projects since the specified commit/branch. Usage example: pnpm pattern="**/README.md" build
Adding completion: --fail-if-no-match:If no projects are matched by the command, exit with exit code 1 (fail) \! in zsh), it means the packages matching the selector must be excluded. E.g., "pnpm packages except "foo" under the current working directory indirect dependents of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: ...^foo (...^^foo in Command Prompt) dependents of the matched packages. E.g.: ...foo, "...@bar/*" inside a given subdirectory. E.g.: ./components since the specified commit/branch. E.g.: "[master]", "[HEAD~2]". It may be used together with "...". So, for instance, "...[HEAD~1]" selects all packages changed in the last commit and their dependents under the specified directory. It may be used with "..." to select dependents/dependencies as well. It also may be combined with "[<since>]". For instance, all changed projects inside a directory: "{packages}[origin/master]"
Adding completion: --filter:Restricts the scope to package names matching the given pattern. E.g.: foo, "@bar/*" dependencies of the matched packages. E.g.: foo... indirect dependencies of the matched packages without including the matched packages themselves. ^ must be doubled at the Windows Command Prompt. E.g.: foo^... (foo^^... in Command Prompt)
Adding completion: --filter-prod:Restricts the scope to package names matching the given pattern similar to --filter, but it ignores devDependencies when searching for dependencies and dependents.
Adding completion: --test-pattern:Defines files related to tests. Useful with the changed since filter. When selecting only changed packages and their dependent packages, the dependent packages will be ignored in case a package has changes only in tests. Usage example: pnpm
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --h
Truncated words[*]: pnpm install --h,
lastParam: --h, lastChar: h
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --h
completion output: --help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
:4
last line: :4
directive: 4
completions: --help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
flagPrefix: 
Adding completion: --help:Output usage information
Adding completion: --hoist-pattern:Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --h
Truncated words[*]: pnpm install --h,
lastParam: --h, lastChar: h
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --h
completion output: --help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
:4
last line: :4
directive: 4
completions: --help	Output usage information
--hoist-pattern	Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
flagPrefix: 
Adding completion: --help:Output usage information
Adding completion: --hoist-pattern:Hoist all dependencies matching the pattern to `node_modules/.pnpm/node_modules`. The default pattern is * and matches everything. Hoisted packages can be required by any dependencies, so it is an emulation of a flat node_modules
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 4, words[*]: pnpm install --hoist-pattern 
Truncated words[*]: pnpm install --hoist-pattern ,
lastParam: , lastChar: 
Adding extra empty parameter
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern '' ''
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: 
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --hoist-pattern=
Truncated words[*]: pnpm install --hoist-pattern=,
lastParam: --hoist-pattern=, lastChar: =
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern=
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: -P --hoist-pattern=
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --hoist-pattern=
Truncated words[*]: pnpm install --hoist-pattern=,
lastParam: --hoist-pattern=, lastChar: =
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern=
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: -P --hoist-pattern=
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --hoist-pattern=
Truncated words[*]: pnpm install --hoist-pattern=,
lastParam: --hoist-pattern=, lastChar: =
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --hoist-pattern=
completion output: :4
last line: :4
directive: 4
completions: 
flagPrefix: -P --hoist-pattern=
Calling _describe
_describe did not find completions.
Checking if we should do file completion.
deactivating file completion

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --r
Truncated words[*]: pnpm install --r,
lastParam: --r, lastChar: r
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --r
completion output: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --recursive:Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --resolution-only:Re-runs resolution: useful for printing out peer dependency issues
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --re
Truncated words[*]: pnpm install --re,
lastParam: --re, lastChar: e
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --re
completion output: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --recursive:Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --resolution-only:Re-runs resolution: useful for printing out peer dependency issues
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm install --re
Truncated words[*]: pnpm install --re,
lastParam: --re, lastChar: e
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- install --re
completion output: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --recursive	Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
--resolution-only	Re-runs resolution: useful for printing out peer dependency issues
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --recursive:Run installation recursively in every package found in subdirectories. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --resolution-only:Re-runs resolution: useful for printing out peer dependency issues
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm add --r
Truncated words[*]: pnpm add --r,
lastParam: --r, lastChar: r
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- add --r
completion output: --recursive	Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --recursive	Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --recursive:Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions

========= starting completion logic ==========
CURRENT: 3, words[*]: pnpm add --re
Truncated words[*]: pnpm add --re,
lastParam: --re, lastChar: e
About to call: eval node /Users/amir/Desktop/projects/tab/dist/bin/cli.js pnpm complete -- add --re
completion output: --recursive	Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
--reporter	Output reporter for pnpm commands
:4
last line: :4
directive: 4
completions: --recursive	Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
--reporter	Output reporter for pnpm commands
flagPrefix: 
Adding completion: --recursive:Run installation recursively in every package found in subdirectories or in every workspace package, when executed inside a workspace. For options that may be used with `-r`, see "pnpm help recursive"
Adding completion: --reporter:Output reporter for pnpm commands
Calling _describe
_describe found some completions
